# ----------------------------------------------------------------------------
#
# Copyright (c) 2020, WSO2 Inc. (http://wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# ----------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template to run performance tests. This template
  would create a Amazon ECS cluster and run the tests using Fargate instances. 
  The JMeter Client EC2 instance will be in a public subnet with a public IP. 
  All other EC2 instances will be in a private subnet.
  **WARNING** This template creates multiple Amazon AWS resources. You will be
  billed for the AWS resources used if you create a stack from this template.

#########################
# Params to edit
########################
# Instance type in EC2 Instance

#############################
# User inputs
#############################
Parameters:
  UserEmail:
    Type: String
    Description: Email address of the user creating this stack
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    ConstraintDescription: You should enter a valid email
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  GitURL:
    Description: URL for the github repo of the ballerina performance tests
    Type: String
    ConstraintDescription: must be the URL of the github repository.
################################
# Create AWS resources
################################
Resources:
  ####################################################################
  # Create IAM resources for ECS task execution
  ####################################################################
  EC2ResourceAccessRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: AmazonEC2ContainerRegistryFullAccess 
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Full access to ECR 
                - 'ecr:*'
                # Read Access to cloudtrail
                - 'cloudtrail:LookupEvents'
              Resource: '*'
                    Policies:
        - PolicyName: AWSCloudFormationFullAccess 
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'cloudformation:*'
              Resource: '*'
  ##########################################################################################
  # Create VPC, public subnet and private subnet
  ##########################################################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'VPC'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  # Configure Public Subnet
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicSubnet'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'InternetGateway'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PublicRouteTable'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  # Configure Private Subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateSubnet'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt
        - NatGatewayIPAddress
        - AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'NatGateway'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  NatGatewayIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - ':'
            - - 'PrivateRouteTable'
              - !Ref AWS::StackName
        - Key: User
          Value: !Ref UserEmail
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security Group for Fargate tasks
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ##########################################################################################
  # Create EC2 instance to start performance test
  ##########################################################################################

Type: 'AWS::EC2::Instance'
    DependsOn: [AttachGateway, BucketPolicy]
    Properties:
      ImageId: ami-0a63f96e85105c6d3
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: '{{ name }}'
        - Key: User
          Value: !Ref UserEmail
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref PublicSubnet
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          export repo_directory="/home/ubuntu/ballerina-performance-aws-ecs"
          export script_directory="$repo_directory/distribution/scripts"
          # Start by cloning the performance test repository
          git clone ${GitURL} $repo_directory
          if [ ! -d $repo_directory ]; then
            echo "Could not pull the ecs performance test repository."
            exit 1
          fi
          if [ ! -d $script_directory ]; then
            echo "Script directory not available"
            exit 1
          fi
          chmod +x $script_directory/setup/setup-start.sh
          $script_directory/setup/setup-start.sh
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M